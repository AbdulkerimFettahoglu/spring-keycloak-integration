Keycloak tarafında yapılanlar:
1 - "new-realm" isminde bir realm oluşturuldu.
2 - "new-client" isminde bir client oluşturuldu.
3 - "new-user" isminde bir user oluşturuldu.
4 - "new-user" için şifre oluşturuldu.
5 - bu işlemler ardından aşağıdaki url adresini kullanarak yenileme ve erişim tokenine erişebildim.
    http://localhost:8080/realms/new-realm/protocol/openid-connect/token
6 - spring uygulamasının oauth ile çalışabilmesi için gerekli bağımlılıklar eklendi.
7 - gerekli ayarlar "application.properties" dosyasında yapıldı.
8 - "SecurityConfig" sınıfı oluşturuldu.
9 - LDAP tarafındaki admin kullanıcısının konumu öğrenildi.
9.1 - LDAP' ın konumu ve admin bilgileri doğrultusunda Keycloak ayarları yapıldı.
9.2 - LDAP kullanıcılarının konumu öğrenildi.
9.3 - LDAP kullanıcalarının konumu doğrultusunda Keycloak ayarları yapıldı.
9.4 - Synch denemesi. (hiç bir kullanıcıyı görmedi.)
9.5 - LDAP kullanıcılarınımızı benzersiz şekilde ifade eden alanın "entryUUID" olduğu görüldü.
9.6 - LDAP kullanıcılarımınızın "objectClass" değerlerinin "inetOrgPerson (structural),
organizationalPerson (structural), person (structural), top (abstract)" olduğu görüldü.
9.7 - Doğru LDAP "objectClass" değerleri Keycloak' a eklendi. "entryUUID" değişikliği yapıldı.
9.8 - kullanıcı adı olarak "uid" kullanılması daha mantıklı. gerekli ayarlar yapıldı. "Username LDAP attribute"
alanı "uid" olarak ayarlandı.
9.9 - "cn" kaldırılıp yerine "uid" eklenince Keycloak LDAP' tan bu alanı çekmemeye başladı. Bu durum
görüntüdeki hataya sebep oldu.
9.10 - "cn" alanını ldap' tan getirebilmek için Keycloak üzerinde yeni bir LDAP Mapper tanımlandı.
10 - LDAP gruplarının role olarak JWT içerisine eklenmeye çalışıcağız.
10.1 - LDAP grubunu oluşturan "objectClass" değerlerinin "groupOfUniqueNames (structural)", "top (abstract)"
olduğu görüldü. Bu grubun üyeleri ise "uniquemember" olarak gözüküyor.
10.2 - LDAP' daki grupların bilgileri doğrultusunda Keycloak üzerinde mapper oluşturuldu.
10.3 - LDAP gruplarının Keycloak' a geldiği görüldü.
11 - Keycloak üzerinden alınan JWT token içeriğinde, kişinin bağlı olduğu grupların gelmediği görüldü.
11.1 - Keycloak üzerinden client' a ait client scope kullanılarak yeni bir mapper oluşturuldu.
11.2 - JWT içerisindeki LDAP grup bilgileri. Görüldüğü gibi başlarında "/" işareti var. Bunu gidermek için
"Full group path" özelliği kapatıldı.
11.3 - Yeni bir ws yazılıp Spring Security' nin hangi JWT alanından kişi rollerini çektiğine bakıldı. "scope"
içeriğinden aldığı görüldü.
11.4 - Client scope içerisindeki "Token Claim Name" kısmı "scope" olarak düzenlendi. WS' in artık
LDAP gruplarını döndüğü görüldü.